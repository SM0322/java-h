git ignoreファイルを作り設定することで、クラスファイルをcommitすることを防ぐことができる

branch　基本はmainブランチで開発を進めるがgit checkout -b でブランチを切って別の軸で開発をすることができる

インターネット上のリモートリポジトリでマージに対してのプルリクエストを行うことで別れていたブランチを結合（merge)することができる

設計図の書き方のルール: モデリング言語(ER図やフローチャートなど)

クラス図: 蔵アス名にフィールドやメソッドを書く(ER図みたいな感じ)

シーケンス図: 実際のプログラムの動きになるように上から下に流れていく設計図

開発の種類; ウォーターフォール型、要件定義、設計、開発、テストの一連の流れで開発する
　　　　　　この方法は前工程で誤りがあると手戻りが発生し修正が大変
　　　　　　スパイラル型: をーたフォール型を少しずつ何度も繰り返して開発する
　　　　　　近年はこちらの開発形態に移行している、顧客からのフィードバックをもらい
　　　　　　完成形を目指していく しかしこちらにも長期的な計画を立てづらい、要求が過度に大きくなってしまうなどの弱点がある
　　　　　　
　　　　　　アジャイルソフトウェア開発宣言
　　　　　　顧客満足度を優先し価値あるソフトウェアを早く継続的に提供するという考え
　　　　　　この宣言がされた後変化への対応に優れたXPやスクラムといった開発手法が提唱された
　　　　　　
　　　　　　基本的には2~4週間の短期間で工程を反復するスパイラル型開発
　　　　　　
　　　　　　xp
　　　　　　シンプルさ、コミュニケーション、フィードバック、相互尊重、勇気
　　　　　　5つの価値観に基づいた開発手法
　　　　　　
　　　　　　テスト駆動開発
　　　　　　テストケースを記述し、それを実行して失敗することを確認する
　　　　　　最小限の労力で修正
　　　　　　テストが通ることを維持しつつリファクタリング
　　　　　　この時テストをたくさん用意するのでなく１つずつ素早く繰り返すことが重要
　　　　　　統合テストもそうだが、細かく回数をこなすことの方がテストは効果がある
　　　　　　
　　　　　　スクラム
　　　　　　開発チームの各メンバーの役割や連携に関するアジャイル開発方法論のこと